from django.test import TestCase
from rest_framework.exceptions import ValidationError
import inspect

from diagrams.services.ClassDiagramService import ClassDiagramService
from framework.factories.ModelFactory import ModelFactory
from framework.factories.AuditorFactory import AuditorFactory
from model_manager.constants import ModelProvider, OpenAIModels
from diagrams.services.DiagramExceptions import UMLDiagramCreationError

class ClassDiagramServiceTests(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        # Use inspect to get all methods of the class
        methods = inspect.getmembers(cls, predicate=inspect.isfunction)
        # Filter methods to only include those that start with 'test'
        test_methods = [method for method in methods if method[0].startswith('test')]
        # Count the test methods
        test_count = len(test_methods)
        print(f"\nExecuting {cls.__name__} containing {test_count} test cases")
    
    def setUp(self):
        self.model_factory = ModelFactory()
        self.auditor_factory = AuditorFactory()
        self.class_diagram_service = ClassDiagramService(model_factory=self.model_factory, auditor_factory=self.auditor_factory)
        
        # Flattened job_payload for testing
        self.job_payload = {"features":["Logging Framework","Authorization Framework"],"sub_features":["Application Logging","JWT"],"job_parameters":{"Authorization Framework":{"JWT":{"Story-13":{"id":"Apollo-13","requirement":"As a user, I want to be able to login using gmail account so that I don't have to remember my passwords.","services_to_use":["Google OAuth"],"acceptance_criteria":"User should be able to login using gmail.","additional_information":""},"Story-14":{"id":"Apollo-14","requirement":"As a IT administrator, I want to be able to login using my company email account.","services_to_use":["Azure AD"],"acceptance_criteria":"IT administrator should be able to login using company email account.","additional_information":""}}},"Logging Framework":{"Application Logging":{"Story-11":{"id":"Apollo-11","requirement":"As a user, I want all my actions to be logged, so that I can trace back my activities for auditing and debugging purposes.","services_to_use":["CloudWatch"],"acceptance_criteria":"All user actions should be logged with a timestamp, user ID, and action details. Logs should be searchable.","additional_information":"Consider GDPR and other legal implications when logging user data."},"Story-12":{"id":"Apollo-12","requirement":"As a IT administrator, I want to easily query logs and retrieve all logs related to request.","services_to_use":["AWS CloudWatch"],"acceptance_criteria":"Logs generated by one request should be logically grouped and there should be an easy to retrieve them.","additional_information":""}}}}}
        self.job_id = "Unit Test Job ID"
        self.model_provider = ModelProvider.OPEN_AI
        self.model_name = OpenAIModels.GPT_3_5_TURBO

    def test_generate_diagram_success(self):
        """
        Test class diagrams can be generated successfully.
        """
        try:
            result = self.class_diagram_service.generate_diagram(self.model_provider, self.model_name, self.job_id, self.job_payload)
            diagrams = result.get('diagrams', [])
            class_diagram_found = any("classDiagram" in diagram.get('diagram', '') for diagram in diagrams)
            self.assertTrue(class_diagram_found)
        except UMLDiagramCreationError as e:
            self.fail(f"Test failed with UMLDiagramCreationError: {e}")
    
    def test_generate_diagram_success_with_context(self):
        """
        Test execution with context, will result in context being used.
        """
        try:
            context = {"context":"AWS CloudWatch strongly recommends adding a separate SIT_CAPSTONE_YP class alongside CloudWatch class to monitor the logs."}
            result = self.class_diagram_service.generate_diagram(self.model_provider, self.model_name, self.job_id, self.job_payload, context)
            # Find the result object
            diagrams = result.get('diagrams', [])
            # Find the words class diagram
            class_diagram_found = any("classDiagram" in diagram.get('diagram', '') for diagram in diagrams)
            # Find the injected context
            context_used = any("SIT_CAPSTONE_YP" in diagram.get('diagram', '') for diagram in diagrams)
            self.assertTrue(class_diagram_found)
            self.assertTrue(context_used)
        except UMLDiagramCreationError as e:
            self.fail(f"Test failed with UMLDiagramCreationError: {e}")

