from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()
from jobs.models import Job
from model_manager.models import ModelName

class ClassDiagram(models.Model):
    """
    Stores class diagrams generated by the user.
    job: Job - The job that the class diagram is associated with.
    model: str - The model id that the class diagram is generated
    feature: str - The feature that the class diagram is generated for
    diagram: str - The class diagram in text format
    description: str - The description of the class diagram
    classes: list - The classes in the diagram
    helper_classes: list - The views, controllers and/or interface classes in the diagram
    is_audited: bool - Determines if the diagram has been audited
    created_timestamp: datetime - The timestamp when the class diagram was created
    last_updated_timestamp: datetime - The timestamp when the class diagram was last updated
    """
    job = models.ForeignKey(Job, on_delete=models.CASCADE)
    model = models.ForeignKey(ModelName, on_delete=models.CASCADE)  # Correct field name
    feature = models.JSONField()  
    diagram = models.TextField()
    description = models.TextField()
    classes = models.JSONField()  
    helper_classes = models.JSONField()
    is_audited = models.BooleanField(default=False) # Determines if the diagram has been audited
    created_timestamp = models.DateTimeField(auto_now_add=True)
    last_updated_timestamp = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Class Diagram for Job: {self.job.job_id} for {self.feature} created on {self.created_timestamp}\n{self.diagram}"
    
class ERDiagram(models.Model):
    """
    Stores ER diagrams generated by the user.
    job: Job - The job that the ER diagram is associated with.
    model: str - The model id that the ER diagram is generated
    feature: str - The feature that the ER diagram is generated for
    diagram: str - The ER diagram in text format
    description: str - The description of the ER diagram
    entities: list - The ER in the diagram
    is_audited: bool - Determines if the diagram has been audited
    created_timestamp: datetime - The timestamp when the ER diagram was created
    last_updated_timestamp: datetime - The timestamp when the ER diagram was last updated
    """
    job = models.ForeignKey(Job, on_delete=models.CASCADE)
    model = models.ForeignKey(ModelName, on_delete=models.CASCADE)  # Correct field name
    feature = models.JSONField()  
    diagram = models.TextField()
    description = models.TextField()
    entities = models.JSONField()  
    is_audited = models.BooleanField(default=False) # Determines if the diagram has been audited
    created_timestamp = models.DateTimeField(auto_now_add=True)
    last_updated_timestamp = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Class Diagram for Job: {self.job.job_id} for {self.feature} created on {self.created_timestamp}\n{self.diagram}"