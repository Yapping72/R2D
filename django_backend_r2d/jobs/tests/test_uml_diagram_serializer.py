from django.test import TestCase
from rest_framework.exceptions import ValidationError
from jobs.serializers.UMLDiagramSerializer import UMLDiagramSerializer
import inspect

class UMLDiagramSerializerTests(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        # Use inspect to get all methods of the class
        methods = inspect.getmembers(cls, predicate=inspect.isfunction)
        # Filter methods to only include those that start with 'test'
        test_methods = [method for method in methods if method[0].startswith('test')]
        # Count the test methods
        test_count = len(test_methods)
        print(f"\nExecuting {cls.__name__} containing {test_count} test cases")
    
    def setUp(self):
        self.valid_data = {
            "features": ["Logging Framework", "Authorization Framework"],
            "sub_features": ["Application Logging", "JWT"],
            "job_parameters": {
                "Logging Framework": {
                    "Application Logging": {
                        "Story-11": {
                            "id": "Apollo-11",
                            "requirement": "As a user, I want all my actions to be logged, so that I can trace back my activities for auditing and debugging purposes.",
                            "services_to_use": ["CloudWatch"],
                            "acceptance_criteria": "All user actions should be logged with a timestamp, user ID, and action details. Logs should be searchable.",
                            "additional_information": "Consider GDPR and other legal implications when logging user data."
                        },
                        "Story-12": {
                            "id": "Apollo-12",
                            "requirement": "As a IT administrator, I want to easily query logs and retrieve all logs related to request.",
                            "services_to_use": ["AWS CloudWatch"],
                            "acceptance_criteria": "Logs generated by one request should be logically grouped and there should be an easy to retrieve them.",
                            "additional_information": ""
                        }
                    }
                },
                "Authorization Framework": {
                    "JWT": {
                        "Story-13": {
                            "id": "Apollo-13",
                            "requirement": "As a user, I want to be able to login using gmail account so that I don't have to remember my passwords.",
                            "services_to_use": ["Google OAuth"],
                            "acceptance_criteria": "User should be able to login using gmail.",
                            "additional_information": ""
                        },
                        "Story-14": {
                            "id": "Apollo-14",
                            "requirement": "As a IT administrator, I want to be able to login using my company email account.",
                            "services_to_use": ["Azure AD"],
                            "acceptance_criteria": "IT administrator should be able to login using company email account.",
                            "additional_information": ""
                        }
                    }
                }
            }
        }
        
        self.invalid_data = {
            "features": ["Logging Framework"],
            "sub_features": ["Application Logging"],
            "job_parameters": {
                "Logging Framework": {
                    "Application Logging": {
                        "Story-11": {
                            "id": "",
                            "requirement": "",
                            "services_to_use": [],
                            "acceptance_criteria": "",
                            "additional_information": ""
                        }
                    }
                }
            }
        }
        
        self.missing_feature_data = {
            "sub_features": ["Application Logging"],
            "job_parameters": {
                "Authorization Framework": {
                    "JWT": {
                        "Story-13": {
                            "id": "Apollo-13",
                            "requirement": "As a user, I want to be able to login using gmail account so that I don't have to remember my passwords.",
                            "services_to_use": ["Google OAuth"],
                            "acceptance_criteria": "User should be able to login using gmail.",
                            "additional_information": ""
                        }
                    }
                }
            }
        }

    def test_uml_diagrams_serializer_with_valid_data(self):
        serializer = UMLDiagramSerializer(data=self.valid_data)
        self.assertTrue(serializer.is_valid())
        self.assertEqual(serializer.validated_data, self.valid_data)

    def test_uml_diagrams_serializer_with_invalid_data(self):
        serializer = UMLDiagramSerializer(data=self.invalid_data)
        self.assertFalse(serializer.is_valid())
        self.assertIn('job_parameters', serializer.errors)
        
    def test_uml_diagrams_serializer_with_missing_feature(self):
        serializer = UMLDiagramSerializer(data=self.missing_feature_data)
        self.assertFalse(serializer.is_valid())
        self.assertIn('features', serializer.errors)

    def test_uml_diagrams_serializer_with_empty_services_to_use(self):
        data = self.valid_data.copy()
        data['job_parameters']['Logging Framework']['Application Logging']['Story-11']['services_to_use'] = []
        serializer = UMLDiagramSerializer(data=data)
        self.assertTrue(serializer.is_valid())

    def test_uml_diagrams_serializer_with_blank_additional_information(self):
        data = self.valid_data.copy()
        data['job_parameters']['Logging Framework']['Application Logging']['Story-11']['additional_information'] = ''
        serializer = UMLDiagramSerializer(data=data)
        self.assertTrue(serializer.is_valid())