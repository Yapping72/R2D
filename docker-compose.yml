version: '3.3'

services:
  django_backend_r2d:  # Django service
    build:
      context: ./django_backend_r2d
    command: python manage.py runserver 0.0.0.0:8000 
    ports:
      - "8000:8000"
    depends_on:
      - postgres_r2d_db
      - redis
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB_PORT=${POSTGRES_DB_PORT}
      - POSTGRES_R2D_HOST=${POSTGRES_R2D_HOST}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - R2D_OPENAI_API_TOKEN=${R2D_OPENAI_API_TOKEN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - LOG_LEVEL=${LOG_LEVEL}
      - APP_ENVIRONMENT=${APP_ENVIRONMENT}
      - CLOUDWATCH_LOG_GROUP_NAME=${CLOUDWATCH_LOG_GROUP_NAME}
      - CLOUDWATCH_LOG_STREAM_NAME=${CLOUDWATCH_LOG_STREAM_NAME}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}

    entrypoint: /app/entrypoint.sh  # bash script will create the database if it doesnt exists
    container_name: django_backend_r2d
    volumes:
      - ./django_backend_r2d:/app # Mount the Django project code
  
  react_frontend_r2d: # React service
    build: 
      context: ./react_frontend_r2d
    command: bash -c "npm install && npm run dev -- --host 0.0.0.0" 
    volumes:
      - ./react_frontend_r2d:/app  # Bind mount the frontend code
      - node_modules:/app/node_modules # This is to cache node_modules
    ports:
      - "5173:5173"
    working_dir: /app
    container_name: react_frontend_r2d
    
  postgres_r2d_db:
    image: postgres:latest
    volumes:
      - postgres_r2d_db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    container_name: postgres_r2d_db_data
   
  redis:
    image: redis:latest

  celery-worker:
    build:
      context: ./django_backend_r2d
    command: celery -A django_backend_r2d worker --loglevel=info
    depends_on:
      - django_backend_r2d
      - redis
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB_PORT=${POSTGRES_DB_PORT}
      - POSTGRES_R2D_HOST=${POSTGRES_R2D_HOST}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - R2D_OPENAI_API_TOKEN=${R2D_OPENAI_API_TOKEN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - LOG_LEVEL=${LOG_LEVEL}
      - APP_ENVIRONMENT=${APP_ENVIRONMENT}
      - CLOUDWATCH_LOG_GROUP_NAME=${CLOUDWATCH_LOG_GROUP_NAME}
      - CLOUDWATCH_LOG_STREAM_NAME=${CLOUDWATCH_LOG_STREAM_NAME}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    volumes:
      - ./django_backend_r2d:/app

volumes:
  postgres_r2d_db_data:
  node_modules: